@model DispositivoViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Monitoramento de Temperatura</h1>
<link rel="stylesheet" href="~/css/site.css" />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="container">
    <div class="grafico">
        <h3>Gráfico de Temperatura</h3>
        <canvas id="graficoTemperatura"></canvas>
    </div>
</div>

<div>
    <input class="form-control" type="number" step="0.1" id="temperaturaReal" placeholder="Temperatura real (°C)">
    <button class="btn btn-info" onclick="calibrarTemperatura()">Calibrar</button>
    <span id="ajusteCalibracao"></span>
    <br />
    <button class="btn btn-warning" onclick="resetarCalibracao()">Resetar ajuste</button>
</div>

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
        text-align: center;
        padding: 20px;
    }

    
    .grafico canvas {
        max-height: 400px; /* Limita a altura do gráfico */
    }


    .container {
        width: 90%;
        max-width: 800px;
        margin: auto;
    }

    .grafico {
        background: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
    }
</style>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<canvas id="voltageChart" width="600" height="300"></canvas>

<script>
function atualizarGrafico() {
    $.get('/Dispositivo/ReceberDadosOrion?id=@Model.Id&lastN=50', function(response) {
        // response é um array de objetos: [{data, voltagem, temperatura}, ...]
        const labels = response.map(v => v.data);
        const data = response.map(v => v.voltagem);

        voltageChart.data.labels = labels;
        voltageChart.data.datasets[0].data = data;
        voltageChart.update();
    });
}
const ctx = document.getElementById('voltageChart').getContext('2d');
const voltageChart = new Chart(ctx, {
    type: 'line',
    data: {
        labels: [],
        datasets: [{
            label: 'Tensão (V)',
            data: [],
            borderColor: 'blue',
            fill: false
        }]
    },
    options: {
        scales: {
            x: { title: { display: true, text: 'Tempo' } },
            y: { title: { display: true, text: 'Tensão (V)' } }
        }
    }
});

// Atualiza o gráfico ao carregar e a cada 10 segundos
atualizarGrafico();
setInterval(atualizarGrafico, 10000);
</script>

<script>
function calibrarTemperatura() {
    // Pega o último valor do gráfico como temperatura calculada
    let temperaturaReal = prompt("Informe a temperatura real (°C):");
    if (temperaturaReal === null) return; // Cancelado
    temperaturaReal = parseFloat(temperaturaReal.replace(",", "."));
    if (isNaN(temperaturaReal)) {
        document.getElementById('ajusteCalibracao').textContent = "Digite a temperatura real!";
        return;
    }
    let temperaturaCalculada = voltageChart.data.datasets[0].data.slice(-1)[0];
    $.post('/Dispositivo/CalibrarTemperatura', { temperaturaReal, temperaturaCalculada }, function(resposta) {
        if(!resposta.sucesso)
            document.getElementById('ajusteCalibracao').textContent = "Ajuste aplicado: " + resposta.ajuste.toFixed(2) + "°C";
        else
            alert("Erro ao calibrar!");
    });
}

function resetarCalibracao() {
    $.post('/Dispositivo/ResetarCalibracao', {}, function(resposta) {
        if(resposta.sucesso)
            document.getElementById('ajusteCalibracao').textContent = "";
        else
            alert("Erro ao calibrar!");
    });
}
</script>